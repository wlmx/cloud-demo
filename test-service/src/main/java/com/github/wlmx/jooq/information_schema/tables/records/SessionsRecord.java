/*
 * This file is generated by jOOQ.
 */
package com.github.wlmx.jooq.information_schema.tables.records;


import com.github.wlmx.jooq.information_schema.tables.Sessions;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionsRecord extends TableRecordImpl<SessionsRecord> implements Record8<Integer, String, OffsetDateTime, String, OffsetDateTime, Boolean, String, Integer> {

    private static final long serialVersionUID = 1235879316;

    /**
     * Setter for <code>INFORMATION_SCHEMA.SESSIONS.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SESSIONS.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SESSIONS.USER_NAME</code>.
     */
    public void setUserName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SESSIONS.USER_NAME</code>.
     */
    public String getUserName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SESSIONS.SESSION_START</code>.
     */
    public void setSessionStart(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SESSIONS.SESSION_START</code>.
     */
    public OffsetDateTime getSessionStart() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SESSIONS.STATEMENT</code>.
     */
    public void setStatement(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SESSIONS.STATEMENT</code>.
     */
    public String getStatement() {
        return (String) get(3);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SESSIONS.STATEMENT_START</code>.
     */
    public void setStatementStart(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SESSIONS.STATEMENT_START</code>.
     */
    public OffsetDateTime getStatementStart() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SESSIONS.CONTAINS_UNCOMMITTED</code>.
     */
    public void setContainsUncommitted(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SESSIONS.CONTAINS_UNCOMMITTED</code>.
     */
    public Boolean getContainsUncommitted() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SESSIONS.STATE</code>.
     */
    public void setState(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SESSIONS.STATE</code>.
     */
    public String getState() {
        return (String) get(6);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SESSIONS.BLOCKER_ID</code>.
     */
    public void setBlockerId(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SESSIONS.BLOCKER_ID</code>.
     */
    public Integer getBlockerId() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, OffsetDateTime, String, OffsetDateTime, Boolean, String, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, OffsetDateTime, String, OffsetDateTime, Boolean, String, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Sessions.SESSIONS.ID;
    }

    @Override
    public Field<String> field2() {
        return Sessions.SESSIONS.USER_NAME;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return Sessions.SESSIONS.SESSION_START;
    }

    @Override
    public Field<String> field4() {
        return Sessions.SESSIONS.STATEMENT;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return Sessions.SESSIONS.STATEMENT_START;
    }

    @Override
    public Field<Boolean> field6() {
        return Sessions.SESSIONS.CONTAINS_UNCOMMITTED;
    }

    @Override
    public Field<String> field7() {
        return Sessions.SESSIONS.STATE;
    }

    @Override
    public Field<Integer> field8() {
        return Sessions.SESSIONS.BLOCKER_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUserName();
    }

    @Override
    public OffsetDateTime component3() {
        return getSessionStart();
    }

    @Override
    public String component4() {
        return getStatement();
    }

    @Override
    public OffsetDateTime component5() {
        return getStatementStart();
    }

    @Override
    public Boolean component6() {
        return getContainsUncommitted();
    }

    @Override
    public String component7() {
        return getState();
    }

    @Override
    public Integer component8() {
        return getBlockerId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUserName();
    }

    @Override
    public OffsetDateTime value3() {
        return getSessionStart();
    }

    @Override
    public String value4() {
        return getStatement();
    }

    @Override
    public OffsetDateTime value5() {
        return getStatementStart();
    }

    @Override
    public Boolean value6() {
        return getContainsUncommitted();
    }

    @Override
    public String value7() {
        return getState();
    }

    @Override
    public Integer value8() {
        return getBlockerId();
    }

    @Override
    public SessionsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SessionsRecord value2(String value) {
        setUserName(value);
        return this;
    }

    @Override
    public SessionsRecord value3(OffsetDateTime value) {
        setSessionStart(value);
        return this;
    }

    @Override
    public SessionsRecord value4(String value) {
        setStatement(value);
        return this;
    }

    @Override
    public SessionsRecord value5(OffsetDateTime value) {
        setStatementStart(value);
        return this;
    }

    @Override
    public SessionsRecord value6(Boolean value) {
        setContainsUncommitted(value);
        return this;
    }

    @Override
    public SessionsRecord value7(String value) {
        setState(value);
        return this;
    }

    @Override
    public SessionsRecord value8(Integer value) {
        setBlockerId(value);
        return this;
    }

    @Override
    public SessionsRecord values(Integer value1, String value2, OffsetDateTime value3, String value4, OffsetDateTime value5, Boolean value6, String value7, Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SessionsRecord
     */
    public SessionsRecord() {
        super(Sessions.SESSIONS);
    }

    /**
     * Create a detached, initialised SessionsRecord
     */
    public SessionsRecord(Integer id, String userName, OffsetDateTime sessionStart, String statement, OffsetDateTime statementStart, Boolean containsUncommitted, String state, Integer blockerId) {
        super(Sessions.SESSIONS);

        set(0, id);
        set(1, userName);
        set(2, sessionStart);
        set(3, statement);
        set(4, statementStart);
        set(5, containsUncommitted);
        set(6, state);
        set(7, blockerId);
    }
}
